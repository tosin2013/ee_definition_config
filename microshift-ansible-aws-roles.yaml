---
- name: Using role create job template
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    controller_hostname: "{{ controller_hostname_var }}"
    controller_username: "{{ controller_username_var }}"
    controller_password: "{{ controller_password_var }}"
    controller_validate_certs: "{{ controller_validate_certs_var }}"
    controller_configuration_credentials_secure_logging: false
    controller_projects:
      - name: EE build project
        scm_type: git
        scm_url: "{{ ee_builder_project_url_var }}"
        scm_branch: main
        scm_update_on_launch: true
        description: EE build project
        organization: Default
        wait: true
        update: true
      - name: Ansible Roles for AWS Infrastructure Creation
        scm_type: git
        scm_url: "{{ project_url_var }}"
        scm_branch: master
        scm_update_on_launch: true
        description: Ansible Roles for AWS Infrastructure Creation
        organization: Default
        wait: true
        update: true
      - name: Microshift management and automation Collection
        scm_type: git
        scm_url: "{{ microshift_project_url_var }}"
        scm_branch: main
        scm_update_on_launch: true
        description: Microshift management and automation Collection
        organization: Default
        wait: true
        update: true
    controller_inventories:
      - name: Controller Hosts
        organization: Default
      - name: Remote Build Servers
        organization: Default
    controller_hosts:
      - name: localhost
        inventory: Controller Hosts
        enabled: true
        variables:
          ansible_connection: local
          ansible_python_interpreter: '{{ ansible_playbook_python }}'
      - name: "{{ remote_builder_hostname_var }}"
        inventory: Remote Build Servers
        enabled: true
        variables:
          ansible_connection: ssh
          ansible_ssh_user: "{{ remote_builder_username_var }}"
          ansible_ssh_pass: "{{ remote_builder_password_var }}"
    controller_credential_types:
      - name: Registery Credentials
        description: REST API Credential
        kind: cloud
        inputs:
          fields:
            - id: base_registery_username
              type: string
              label: RH Registery Username
            - id: base_registery_password
              type: string
              label: RH Registery Password
              secret: true
            - id: ee_registry_username
              type: string
              label: AH Registery Username
            - id: ee_registry_password
              type: string
              label: AH Registery Password
              secret: true
            - id: ee_ah_host
              type: string
              label: AH Hostname
            - id: ee_ah_token
              type: string
              label: AH Token
              secret: true
            - id: ee_validate_certs
              type: boolean
              default: false
              label: Validate certs
          required:
            - base_registery_username
            - base_registery_password
        injectors:
          extra_vars:
            ee_base_registry_username: !unsafe "{{ base_registery_username }}"
            ee_base_registry_password: !unsafe "{{ base_registery_password }}"
            ee_registry_username: !unsafe "{{ ee_registry_username }}"
            ee_registry_password: !unsafe "{{ ee_registry_password }}"
            ee_validate_certs: !unsafe "{{ ee_validate_certs }}"
            ah_host: !unsafe "{{ ee_ah_host }}"
            ah_token: !unsafe "{{ ee_ah_token }}"
    controller_credentials:
      - credential_type: Registery Credentials
        name: Execution Build Credentials
        organization: Default
        inputs:
          base_registery_username:  "{{ base_registery_username_var }}"
          base_registery_password:  "{{ base_registery_password_var }}"
          ee_registry_username: "{{ ee_registry_username_var }}"
          ee_registry_password: "{{ ee_registry_password_var }}"
          ee_validate_certs: "{{ ee_validate_certs_var }}"
          ee_ah_host: "{{ ah_host_var }}"
          ee_ah_token: "{{ ah_token_var }}"
      - credential_type:  Amazon Web Services
        name: Amazon Web Services
        description: AWS Execution Build Credentials
        organization: Default
        inputs:
          password: "{{ aws_secret_access_key }}"
          username: "{{ aws_access_key_id }}"
    controller_templates:
      - name: Microshft Execution Environment Builder
        job_type: run
        inventory: Remote Build Servers
        credentials:
          - Execution Build Credentials
        project: EE build project
        playbook: ee_builder_edge_microshift.yaml
        verbosity: 1
        extra_vars:
          ee_registry_dest: "{{ ee_registry_dest_var }}"
      - name: AWS Execution Environment Builder
        job_type: run
        inventory: Remote Build Servers
        credentials:
          - Execution Build Credentials
        project: EE build project
        playbook: ee_builder_controller_aws_roles.yaml
        verbosity: 1
        extra_vars:
          ee_registry_dest: "{{ ee_registry_dest_var }}"
      - name: Push Execution Environments to Controller
        job_type: run
        inventory: Controller Hosts
        credentials:
          - Controller Credential
        project: EE build project
        execution_environment: Minimal execution environment
        playbook: push_to_controller.yaml
        extra_vars:
          ee_registry_dest: "{{ ee_registry_dest_var }}"
      - name: Deploy AWS VPC and Subnets
        job_type: run
        job_tags: create-vpc
        inventory: Controller Hosts
        credentials:
          - Amazon Web Services
        project: Ansible Roles for AWS Infrastructure Creation
        playbook: aws.yml  # Name of your test playbook
        verbosity: 1
        execution_environment: Custom EE  # Specify the execution environment here
        extra_vars:
          VPC_NAME: microshift  # Name of the VPC
          VPC_REGION: us-east-2  # Region where the VPC will be created (Ohio)
          VPC_CIDR: "172.25.0.0/16"  # CIDR block for the VPC
          VPC_CLASS_DEFAULT: "172.25"  # Default class for IP addresses within the VPC
          vpc_name: "{{ VPC_NAME }}"  # Name of the VPC (using the VPC_NAME variable)
          vpc_region: "{{ VPC_REGION }}"  # Region of the VPC (using the VPC_REGION variable)
          vpc_cidr_block: "{{ VPC_CIDR }}"  # CIDR block of the VPC (using the VPC_CIDR variable)
          public_cidr_1: "{{ VPC_CLASS_DEFAULT }}.10.0/24"  # CIDR block for Public Subnet-1
          public_az_1: "{{ vpc_region }}a"  # Availability Zone for Public Subnet-1
          public_cidr_2: "{{ VPC_CLASS_DEFAULT }}.20.0/24"  # CIDR block for Public Subnet-2
          public_az_2: "{{ vpc_region }}b"  # Availability Zone for Public Subnet-2
          private_cidr_1: "{{ VPC_CLASS_DEFAULT }}.30.0/24"  # CIDR block for Private Subnet-1
          private_az_1: "{{ vpc_region }}a"  # Availability Zone for Private Subnet-1
          private_cidr_2: "{{ VPC_CLASS_DEFAULT }}.40.0/24"  # CIDR block for Private Subnet-2
          private_az_2: "{{ vpc_region }}b"  # Availability Zone for Private Subnet-2
          public_vpc_subnets:
            - cidr: "{{ public_cidr_1 }}"  # CIDR block for Public Subnet-1
              az: "{{ public_az_1 }}"  # Availability Zone for Public Subnet-1
              resource_tags: { "Name":"{{ vpc_name }}-{{ public_az_1 }}-public_subnet-1", "Type":"Public", "Alias":"Public_Subnet_1" }  # Resource tags for Public Subnet-1
            - cidr: "{{ public_cidr_2 }}"  # CIDR block for Public Subnet-2
              az: "{{ public_az_2 }}"  # Availability Zone for Public Subnet-2
              resource_tags: { "Name":"{{ vpc_name }}-{{ public_az_2 }}-public-subnet-2", "Type":"Public", "Alias":"Public_Subnet_2" }  # Resource tags for Public Subnet-2

          private_vpc_subnets:
            - cidr: "{{ private_cidr_1 }}"  # CIDR block for Private Subnet-1
              az: "{{ private_az_1 }}"  # Availability Zone for Private Subnet-1
              resource_tags: { "Name":"{{ vpc_name }}-{{ private_az_1 }}-private-subnet-1", "Type":"Private", "Alias":"Private_Subnet_1" }  # Resource tags for Private Subnet-1
            - cidr: "{{ private_cidr_2 }}"  # CIDR block for Private Subnet-2
              az: "{{ private_az_2 }}"  # Availability Zone for Private Subnet-2
              resource_tags: { "Name":"{{ vpc_name }}-{{ private_az_2 }}-private-subnet-2", "Type":"Private", "Alias":"Private_Subnet_2" }  # Resource tags for Private Subnet-2
      - name: Create AWS Security Groups
        job_type: run
        job_tags: create-ec2sg
        inventory: Controller Hosts
        credentials:
          - Amazon Web Services
        project: Ansible Roles for AWS Infrastructure Creation
        playbook: aws.yml  # Name of your test playbook
        verbosity: 1
        execution_environment: Custom EE  # Specify the execution environment here
        survey_enabled: true
        survey_spec:
          name: VPC ID
          description: VPC ID
          spec:
            - question_name: what is the target vpc ID
              question_description: Name of target VPC ID
              required: true
              type: text
              variable: VPC_ID
              min: 17
              max: 30
        extra_vars:
          EC2_SECURITY_GROUPS:
            - name: "{{ vpc_name }}-sg"
              description: "This sg is just a test sg"
              rules:
                - proto: tcp
                  from_port: 22
                  to_port: 22
                  cidr_ip: 0.0.0.0/0
          ec2_security_groups: "{{ EC2_SECURITY_GROUPS }}"
          vpc_region: "{{ VPC_REGION }}"
      - name: Create AWS ec2-keypair
        job_type: run
        job_tags: create-ec2key
        inventory: Controller Hosts
        credentials:
          - Amazon Web Services
        project: Ansible Roles for AWS Infrastructure Creation
        playbook: aws.yml  # Name of your test playbook
        verbosity: 1
        execution_environment: Custom EE  # Specify the execution environment here
        survey_enabled: true
        survey_spec:
          name: VPC ID
          description: VPC ID
          spec:
            - question_name: what is the target vpc ID
              question_description: Name of target VPC ID
              required: true
              type: text
              variable: VPC_ID
              min: 17
              max: 30
        extra_vars:
          VPC_REGION: "{{ VPC_REGION }}"
          EC2_KEY_NAME: "github-actions"
          ec2_key_name: "{{ EC2_KEY_NAME }}"
          aap_user_ssh_key: "{{ aap_user_pub_ssh_key }}"
          use_github_username: false
          use_local_ssh_key: false
          use_aap_user_ssh_key: true  # Flag to indicate whether to use AAP user SSH key
      - name: Create Deploy AWS EC2 Instances
        job_type: run
        job_tags: create-ec2instance
        inventory: Controller Hosts
        credentials:
          - Amazon Web Services
        project: Ansible Roles for AWS Infrastructure Creation
        playbook: aws.yml  # Name of your test playbook
        verbosity: 1
        execution_environment: Custom EE  # Specify the execution environment here
        survey_enabled: true
        survey_spec:
          name: Deploy microshift EC2 Instance
          description: Deploy microshift EC2 Instances
          spec:
            - question_name: What is the target vpc ID
              question_description: Name of target VPC ID
              required: true
              type: text
              variable: VPC_ID
              min: 17
              max: 30          
            - question_name: Enter AMI Owner ID 
              question_description: Name of AMI Owner ID 
              required: true
              type: text
              variable: AMI_OWNER
              min: 0
              max: 30          
            - question_name: Enter SUBNET ID
              question_description: Name of SUBNET ID
              required: true
              type: text
              variable: EC2_PUBLIC_SUBNET_ID
              min: 0
              max: 30   
        extra_vars:
          ENVIRONMENT: dev
          VPC_REGION: "{{ VPC_REGION }}"
          SERVER_ROLE: microshift
          EC2_KEY_NAME: "{{ EC2_KEY_NAME }}"
          EC2_INSTANCE_TYPE: t2.xlarge
          EC2_SECURITY_GROUP_NAME:  "{{ vpc_name }}-sg"
          EC2_COUNT: 1
          EC2_VOLUME_SIZE: 120
          AMI_NAME: "RHEL-9.3.0_HVM-20231101-x86_64-5-Hourly2-GP2"
          deploy_public_ec2_instance: True
          #EC2_PRIVATE_SUBNET_ID:
          #  - "CHANGEME"
          #  -  "CHANGEME"
          inventory_name: "[microshift]"
  roles:
    - infra.controller_configuration.credential_types
    - infra.controller_configuration.credentials
    - infra.controller_configuration.inventories
    - infra.controller_configuration.hosts
    - infra.controller_configuration.projects
    - infra.controller_configuration.job_templates
...
